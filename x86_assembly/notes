
    Word: a 2-byte data item
    Doubleword: a 4-byte (32 bit) data item
    Quadword: an 8-byte (64 bit) data item
    Paragraph: a 16-byte (128 bit) area
    Kilobyte: 1024 bytes
    Megabyte: 1,048,576 bytes




    The data section,

    The bss section, and

    The text section.


section.data
section.bss
section.text
   global _start
_start:
; This program displays a message on screen
add eax, ebx     ; adds ebx to eax
;[label]   mnemonic   [operands]   [;comment]


nasm -f elf hello.asm 
ld -m elf_i386 -s -o hello hello.o





32-bit data registers: 
EAX, EBX, ECX, EDX.

Lower halves of the 32-bit registers used as four 16-bit data registers: 
AX, BX, CX and DX.
    
Lower and higher halves of the above-mentioned four 16-bit registers 
used as eight 8-bit data registers: 
AH, AL, BH, BL, CH, CL, DH, and DL.

AX is the primary accumulator;
BX is known as the base register, 
CX is known as the count register, 
DX is known as the data register.

Pointer Registers
Instruction Pointer (IP) − The 16-bit IP register stores the offset address of the next instruction to be executed. 
Stack Pointer (SP) − The 16-bit SP register provides the offset value within the program stack. 
Base Pointer (BP) − The 16-bit BP register mainly helps in referencing the parameter variables passed to a subroutine.

The 32-bit index registers, ESI and EDI, and their 16-bit rightmost portions. SI and DI, are used for indexed addressing 
and sometimes used in addition and subtraction.
Source Index (SI) − It is used as source index for string operations.
Destination Index (DI) − It is used as destination index for string operations.




    Type the above code using a text editor and save it as hello.asm.

    Make sure that you are in the same directory as where you saved hello.asm.

    To assemble the program, type nasm -f elf hello.asm

    If there is any error, you will be prompted about that at this stage. Otherwise, an object file of your program named hello.o will be created.

    To link the object file and create an executable file named hello, type ld -m elf_i386 -s -o hello hello.o

    Execute the program by typing ./hello

